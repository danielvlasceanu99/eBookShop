#pragma checksum "D:\Licenta\eBookShop\Views\Admin\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c19adf9d1d4d33f1035d5e03ce27af68badd5d43"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admin_Index), @"mvc.1.0.view", @"/Views/Admin/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Licenta\eBookShop\Views\_ViewImports.cshtml"
using EBookShop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Licenta\eBookShop\Views\_ViewImports.cshtml"
using EBookShop.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c19adf9d1d4d33f1035d5e03ce27af68badd5d43", @"/Views/Admin/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"86d4ec338346d3ccb66fc77fd8ad5bcba04ffdf3", @"/Views/_ViewImports.cshtml")]
    public class Views_Admin_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<EBookShop.ViewModels.AdminViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
  
    ViewData["Title"] = "Admin page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div>
    <div id=""plotOned"" class=""col-md-12""></div>
    <br />
    <div id=""descOned"" class=""col-md-12 text-justify""></div>
    <hr />
    <div id=""plotWishlist"" class=""col-md-12""></div>
    <br />
    <div id=""descWishlist"" class=""col-md-12 text-justify""></div>
    <hr />
    <div id=""plotCart"" class=""col-md-12""></div>
    <br />
    <div id=""descCart"" class=""col-md-12 text-justify""></div>
    <hr />
    <div class=""col-md-12"">
        <button type=""button"" class=""btn btn-primary"" id=""download"">Download as CSV</button>
    </div>
    <br />
    <div class=""col-md-12"">
        <table class=""table table-hover"">
            <thead class=""thead-light"">
                <tr>
                    <th>Title</th>
                    <th>Number of copies sold</th>
                    <th>Number of copies in wishlist</th>
                    <th>Number of copies in cart</th>
                </tr>
            </thead>
            <tbody>
");
#nullable restore
#line 34 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                 for (int i = 0; i < Model.Titles.Count; i++)
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <tr>\r\n                        <td>");
#nullable restore
#line 37 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                       Write(Model.Titles[i]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        <td>");
#nullable restore
#line 38 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                       Write(Model.OwnedNo[i]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        <td>");
#nullable restore
#line 39 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                       Write(Model.WishlistNo[i]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        <td>");
#nullable restore
#line 40 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                       Write(Model.CartNo[i]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                    </tr>\r\n");
#nullable restore
#line 42 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("            </tbody>\r\n            <tfoot style=\"background-color: #e9ecef;\" class=\"shadow\">\r\n");
#nullable restore
#line 45 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                  
                    double ownedSum = Model.Prices.Select((n, i) => n * Model.OwnedNo[i]).Sum();
                    double wishlistSum = Model.Prices.Select((n, i) => n * Model.WishlistNo[i]).Sum();
                    double cartSum = Model.Prices.Select((n, i) => n * Model.CartNo[i]).Sum();
                

#line default
#line hidden
#nullable disable
            WriteLiteral("                <tr>\r\n                    <td></td>\r\n");
#nullable restore
#line 52 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                     if (ownedSum != 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$");
#nullable restore
#line 54 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                                                  Write(String.Format("{0:#,##.##}", ownedSum));

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n");
#nullable restore
#line 55 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$0</td>\r\n");
#nullable restore
#line 59 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 61 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                     if (wishlistSum != 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$");
#nullable restore
#line 63 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                                                  Write(String.Format("{0:#,##.##}", wishlistSum));

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n");
#nullable restore
#line 64 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$0</td>\r\n");
#nullable restore
#line 68 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                     if (cartSum != 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$");
#nullable restore
#line 71 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                                                  Write(String.Format("{0:#,##.##}", cartSum));

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n");
#nullable restore
#line 72 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\">$0</td>\r\n");
#nullable restore
#line 76 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tr>\r\n                <tr>\r\n");
#nullable restore
#line 79 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                     if (ownedSum + wishlistSum + cartSum == 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\" rowspan=\"2\">Total possible revenue: $0</td>\r\n");
#nullable restore
#line 82 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <td class=\"font-weight-bold\" rowspan=\"2\">\r\n                            Total possible revenue: $");
#nullable restore
#line 86 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                                                 Write(String.Format("{0:##,##}", ownedSum + wishlistSum + cartSum));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                        </td>\r\n");
#nullable restore
#line 88 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>Of copies sold</th>\r\n                    <th>Of copies in wishlist</th>\r\n                    <th>Of copies in cart</th>\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("AdminScript", async() => {
                WriteLiteral("\r\n    <script>\r\n        document.addEventListener(\"DOMContentLoaded\", function () {\r\n            var data = ");
#nullable restore
#line 101 "D:\Licenta\eBookShop\Views\Admin\Index.cshtml"
                  Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

            bougthChart(data);
            wishlistChart(data);
            cartNoChart(data);

            writeDescriptionOwned(data);
            writeDescriptionCart(data);
            writeDescriptionWishlist(data);

            document.getElementById(""download"").onclick = function downloadData() {
                let csvContent = ""data:text/csv;charset=utf-8,"";
                for (var i = 0; i < data.titles.length; i++) {
                    csvContent += data.titles[i] + "","" + data.ownedNo[i] + "",""
                        + data.wishlistNo[i] + "","" + data.cartNo[i] + "",\n""; 
                }
                var encodedUri = encodeURI(csvContent);
                var link = document.createElement(""a"");
                link.setAttribute(""href"", encodedUri);
                link.setAttribute(""download"", ""data.csv"");
                document.body.appendChild(link);
                link.click();
            }

        });

        function bougthChart(data) {
            let");
                WriteLiteral(@" titles = Array.from(data.titles);
            let ownedNo = Array.from(data.ownedNo);

            for (var i = 0; i < titles.length; i++) {
                if (ownedNo[i] == 0) {
                    titles.splice(i, 1);
                    ownedNo.splice(i, 1);
                    i--;
                }
            }
            var values = [{
                x: titles,
                y: ownedNo,
                type: ""bar""
            }];
            var layout = {
                title: ""Number of copies bought"",
            };
            Plotly.newPlot(""plotOned"", values, layout);
        }
        function wishlistChart(data) {
            let titles = Array.from(data.titles);
            let wishlistNo = Array.from(data.wishlistNo);

            for (var i = 0; i < titles.length; i++) {
                if (wishlistNo[i] == 0) {
                    titles.splice(i, 1);
                    wishlistNo.splice(i, 1);
                    i--;
                }
            }
");
                WriteLiteral(@"            var values = [{
                x: titles,
                y: wishlistNo,
                type: ""bar""
            }];
            var layout = {
                title: ""Number of copies in wishlist"",
            };
            Plotly.newPlot(""plotWishlist"", values, layout);
        }
        function cartNoChart(data) {
            let titles = Array.from(data.titles);
            let cartNo = Array.from(data.cartNo);

            for (var i = 0; i < titles.length; i++) {
                if (cartNo[i] == 0) {
                    titles.splice(i, 1);
                    cartNo.splice(i, 1);
                    i--;
                }
            }
            var values = [{
                x: titles,
                y: cartNo,
                type: ""bar""
            }];
            var layout = {
                title: ""Number of copies in cart"",
            };
            Plotly.newPlot(""plotCart"", values, layout);
        }

        function writeDescriptionOwned(d");
                WriteLiteral(@"ata) {
            let titles = Array.from(data.titles);
            let ownedNo = Array.from(data.ownedNo);

            for (var i = 0; i < titles.length; i++) {
                if (ownedNo[i] == 0) {
                    titles.splice(i, 1);
                    ownedNo.splice(i, 1);
                    i--;
                }
            }

            let content = document.getElementById(""descOned"");

            if (ownedNo.length == 0) {
                content.innerText = ""No books have been bougth, so there is no data to display.""
            } else if (ownedNo.length == 1) {
                content.innerText = `Only ${ownedNo[0]} copies of ${titles[0]} have been sold`
            } else {
                let minIndex = 0;
                let maxIndex = 0;
                let min = ownedNo[0];
                let max = ownedNo[0];

                for (var i = 1; i < ownedNo.length; i++) {
                    if (ownedNo[i] < min) {
                        min = ownedNo[i];
 ");
                WriteLiteral(@"                       minIndex = i;
                    }
                    if (ownedNo[i] > max) {
                        max = ownedNo[i];
                        maxIndex = i;
                    }
                }
                console.log(minIndex, maxIndex);
                content.innerText = `In the chart above we can see the number of copies sold form each book. `;
                content.innerText += `The most popular one is ${titles[maxIndex]} with ${ownedNo[maxIndex]} copies sold. `;
                content.innerText += `The least popular one is ${titles[minIndex]} with ${ownedNo[minIndex]} copies sold.`;
            }
        }
        function writeDescriptionCart(data) {
            let titles = Array.from(data.titles);
            let cartNo = Array.from(data.cartNo);

            for (var i = 0; i < titles.length; i++) {
                if (cartNo[i] == 0) {
                    titles.splice(i, 1);
                    cartNo.splice(i, 1);
                    i--;
");
                WriteLiteral(@"                }
            }

            let content = document.getElementById(""descCart"");

            if (cartNo.length == 0) {
                content.innerText = ""No books have been added to a cart, so there is no data to display.""
            } else if (cartNo.length == 1) {
                content.innerText = `Only ${cartNo[0]} copies of ${titles[0]} have been added to carts.`
            } else {
                let minIndex = 0;
                let maxIndex = 0;
                let min = cartNo[0];
                let max = cartNo[0];

                for (var i = 1; i < cartNo.length; i++) {
                    if (cartNo[i] < min) {
                        min = cartNo[i];
                        minIndex = i;
                    }
                    if (cartNo[i] > max) {
                        max = cartNo[i];
                        maxIndex = i;
                    }
                }
                console.log(minIndex, maxIndex);
                content.innerT");
                WriteLiteral(@"ext = `In the chart above we can see the number of copies added to carts form each book. `;
                content.innerText += `The most added book is ${titles[maxIndex]} with ${cartNo[maxIndex]} copies sold. `;
                content.innerText += `The least added book is ${titles[minIndex]} with ${cartNo[minIndex]} copies sold.`;
            }
        }
        function writeDescriptionWishlist(data) {
            let titles = Array.from(data.titles);
            let wishlistNo = Array.from(data.wishlistNo);

            for (var i = 0; i < titles.length; i++) {
                if (wishlistNo[i] == 0) {
                    titles.splice(i, 1);
                    wishlistNo.splice(i, 1);
                    i--;
                }
            }

            let content = document.getElementById(""descWishlist"");

            if (wishlistNo.length == 0) {
                content.innerText = ""No books have been added to a wishlist, so there is no data to display.""
            } else if (w");
                WriteLiteral(@"ishlistNo.length == 1) {
                content.innerText = `Only ${wishlistNo[0]} copies of ${titles[0]} have been added to wishlists.`
            } else {
                let minIndex = 0;
                let maxIndex = 0;
                let min = wishlistNo[0];
                let max = wishlistNo[0];

                for (var i = 1; i < wishlistNo.length; i++) {
                    if (wishlistNo[i] < min) {
                        min = wishlistNo[i];
                        minIndex = i;
                    }
                    if (wishlistNo[i] > max) {
                        max = wishlistNo[i];
                        maxIndex = i;
                    }
                }
                content.innerText = `In the chart above we can see the number of copies added to wishlists form each book. `;
                content.innerText += `The most wanted book is ${titles[maxIndex]} with ${wishlistNo[maxIndex]} copies added to wishlists. `;
                content.innerText += `The l");
                WriteLiteral("east wanted book is ${titles[minIndex]} with ${wishlistNo[minIndex]} copies added to wishlists.`;\r\n            }\r\n        }\r\n\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EBookShop.ViewModels.AdminViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
